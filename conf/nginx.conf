events {
  worker_connections 1024;
}
http {
  lua_package_path '/app/?.lua;;';
  server {
    lua_check_client_abort on;
    listen 80;
    location /live-data/sub {
      etag off;
      if_modified_since off;
      default_type text/plain;
      content_by_lua_block {

        local restyredis = require("resty.redis")
        local livepub = require("livepub")
        local method = ngx.req.get_method()
        redis = restyredis.new()
        redis:connect("127.0.0.1", 6379)
        redis:set_timeout(50000)

        if method == "GET" then
          if ngx.var.http_accept == "text/event-stream" then
            livepub.subscribe(redis)
          else
            ngx.exit(400)
          end
        else
	  ngx.say("path 5")
          ngx.exit(400)
        end
      }
    }
    location /live-data/pub/delta {
      etag off;
      if_modified_since off;
      default_type text/plain;
      content_by_lua_block {

        local restyredis = require("resty.redis")
        local livepub = require("livepub")
        local method = ngx.req.get_method()
        redis = restyredis.new()
        redis:connect("127.0.0.1", 6379)
        redis:set_timeout(50000)

        if method == "POST" then
          livepub.delta(redis)
        else
          ngx.exit(400)
        end
      }
    }
    location /live-data/pub/snapshot {
      etag off;
      if_modified_since off;
      default_type text/plain;
      content_by_lua_block {

        local restyredis = require("resty.redis")
        local livepub = require("livepub")
        local method = ngx.req.get_method()
        redis = restyredis.new()
        redis:connect("127.0.0.1", 6379)
        redis:set_timeout(50000)

        if method == "POST" then
          livepub.snapshot(redis)
        else
          ngx.exit(400)
        end
      }
    }
    location / {
      etag off;
      if_modified_since off;
      default_type text/plain;
      content_by_lua_block {

        local restyredis = require("resty.redis")
        local get = require("get")
        local post = require("post")
        local method = ngx.req.get_method()
        redis = restyredis.new()
        redis:connect("127.0.0.1", 6379)
        redis:set_timeout(50000)

        if method == "POST" then
          post.publish(redis)
        elseif method == "GET" then
          if ngx.var.http_accept == "text/event-stream" then
            get.subscribe(redis)
          else
            get.poll(redis)
          end
        else
          ngx.exit(400)
        end
     
      }
    }
  }
}
